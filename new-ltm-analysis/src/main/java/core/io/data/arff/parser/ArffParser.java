/* Generated By:JavaCC: Do not edit this line. ArffParser.java */
package core.io.data.arff.parser;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class ArffParser implements ArffParserConstants {
        public static Data parse(InputStream stream) throws ParseException {
                Data data = new Data();
                try {
                        ArffParser parser = new ArffParser(stream, "UTF-8");
                        parser.Arff(data);
                        return data;
                } catch (RuntimeException e) {
                        if (!data.variables().isSameKind(NominalVariable.class))
                                throw new UnsupportedOperationException(
                                        "Only data with all nominal variables are supported.");
                        else
                                throw e;
                }
        }

  final public void Arff(Data data) throws ParseException {
    Relation(data);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTRIBUTE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Attribute(data.variables());
    }
    Data(data);
    jj_consume_token(0);
  }

  final public void Relation(Data data) throws ParseException {
        String name;
    jj_consume_token(RELATION);
    name = StringLiteral();
                                          data.setName(name);
  }

  final public void Attribute(VariableCollection variables) throws ParseException {
        Variable variable;
        String name;
        String state;
        List<String> states;
    jj_consume_token(ATTRIBUTE);
    name = StringLiteral();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      states = NominalSpecification();
                boolean integerList = IntegerText.isIntegerList(states);
                variables.add(new NominalVariable(name, states, integerList));
      break;
    case REAL:
      jj_consume_token(REAL);
                 variables.add(new NumericVariable(name));
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        jj_consume_token(22);
        jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(23);
        jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(24);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
                  variables.add(new NumericVariable(name));
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public List<String> NominalSpecification() throws ParseException {
        List<String> states = new ArrayList<String>();
    jj_consume_token(25);
    NominalState(states);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(23);
      NominalState(states);
    }
    jj_consume_token(26);
          {if (true) return states;}
    throw new Error("Missing return statement in function");
  }

  final public void NominalState(List<String> states) throws ParseException {
        String state;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case INTEGER:
    case DQUOTED_STRING_LITERAL:
    case SQUOTED_STRING_LITERAL:
    case STRING_LITERAL:
      state = StringLiteral();
                                states.add(state);
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                              states.add(t.image);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Data(Data data) throws ParseException {
        Instance instance;
    jj_consume_token(DATA);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL:
      case INTEGER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case DQUOTED_STRING_LITERAL:
      case SQUOTED_STRING_LITERAL:
      case STRING_LITERAL:
      case 27:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      instance = Instance(data);
                                          data.instances().add(instance);
    }
  }

  final public Instance Instance(Data data) throws ParseException {
        List<String> values = new ArrayList<String>(data.variables().size());
    Value(values);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(23);
      Value(values);
    }
          {if (true) return new Instance(data.variables(), values);}
    throw new Error("Missing return statement in function");
  }

  final public void Value(List<String> values) throws ParseException {
        String value;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case INTEGER:
    case DQUOTED_STRING_LITERAL:
    case SQUOTED_STRING_LITERAL:
    case STRING_LITERAL:
      value = StringLiteral();
                                values.add(value);
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                              values.add(t.image);
      break;
    case FLOAT_LITERAL:
      t = jj_consume_token(FLOAT_LITERAL);
                            values.add(t.image);
      break;
    case 27:
      jj_consume_token(27);
              values.add(null);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String StringLiteral() throws ParseException {
        Token t;
        String value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQUOTED_STRING_LITERAL:
      t = jj_consume_token(DQUOTED_STRING_LITERAL);
                  value = t.image.substring(1, t.image.length() -1);
      break;
    case SQUOTED_STRING_LITERAL:
      t = jj_consume_token(SQUOTED_STRING_LITERAL);
                  value = t.image.substring(1, t.image.length() -1);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                  value = t.image;
      break;
    case REAL:
      t = jj_consume_token(REAL);
          value = t.image;
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
         value = t.image;
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ArffParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x400000,0x200c000,0x800000,0x3ac000,0x83ec000,0x800000,0x83ec000,0x38c000,};
   }

  /** Constructor with InputStream. */
  public ArffParser(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ArffParser(InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ArffParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ArffParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ArffParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ArffParser(ArffParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ArffParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
